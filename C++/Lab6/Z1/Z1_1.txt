#include <iostream>

using namespace std;



class Table
{
private:
	int size;				// Размер стола
	const char* color;		// Цвет стола

public:
	Table()
	{
		cout << "Const Table" << endl;
	}
	Table(int size, const char* color)
	{
		this->color = new char[10];
		color = new char[10];

		this->size = size;
		this->color = color;
	}
	~Table()
	{
		delete[] color;
	}

	int CalcVolume()
	{
		cout << "Объём стола:\t";
		return size;	// Объём стола
	}
};



class CompTable : public Table
{
private:
	int h;
	const char* material;

public:
	CompTable()
	{
		cout << "Const CompTable" << endl;
	}
	CompTable(int h, const char* material, int size, const char* color):Table(size, color)			// Вызываем конструктор родителя ???????
	{
		this->material = new char[10];
		material = new char[10];

		this->h = h;
		this->material = material;
	}
	~CompTable()
	{
		delete[] material;
	}


	int CalcVolume()
	{
		cout << "Объём комп. стола:\t";
		return h * h * h + Table::CalcVolume();		// Размер компьютерной подставки + объём стола. (объём стола и комп.стола общий)
	}
};

int main()
{
	setlocale(LC_ALL, "ru");


	//Table* T = new CompTable(3, "Железо", 6, "Красный");				// Создаётся указатель на объект класса типа table и ему присваивается выделенная память класса CompTable ?????
	
	// CompTable C(3, "Железо", 6, "Красный");

	Table* T;

	bool key;

	cout << "Table(1) or CompTable(0)?\t"; cin >> key;
	if (key == true)
	{
		T = new Table(6, "Красный");
	}
	else
	{
		T = new CompTable(3, "Железо", 6, "Красный");
	}

	cout << T->CalcVolume() << endl;

	cout << endl;
	return 0;
}